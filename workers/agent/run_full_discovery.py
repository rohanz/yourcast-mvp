#!/usr/bin/env python3
"""
Full RSS Discovery Script - Populate database with all available articles
"""

import sys
import os
import time
from datetime import datetime

sys.path.append('.')

from agent.config import settings
from agent.rss_config import get_all_feeds
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

def run_full_discovery():
    """Run full RSS discovery with no limits"""
    print("üöÄ Starting Full RSS Discovery\n")
    
    # Show configuration
    feeds = get_all_feeds()
    print(f"üì° Configured feeds: {len(feeds)}")
    print(f"üïê Started at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"ü§ñ AI responses will be shown for clustering decisions")
    print("="*60)
    
    try:
        # Database setup
        print("\nüóÑÔ∏è  Setting up database connection...")
        engine = create_engine(settings.database_url)
        SessionLocal = sessionmaker(bind=engine)
        db = SessionLocal()
        print("‚úÖ Database connected")
        
        # Initialize RSS Discovery Service
        print("\nüì° Initializing RSS Discovery Service...")
        from agent.services.rss_discovery_service import RSSDiscoveryService
        
        service = RSSDiscoveryService(db, debug_llm_responses=True)
        print("‚úÖ RSS Discovery Service initialized")
        
        # Run discovery
        print("\nüîç Processing all RSS feeds (this may take several minutes)...")
        start_time = time.time()
        
        results = service.discover_and_process_articles(
            max_articles_per_feed=1000  # High limit to get all available articles
        )
        
        end_time = time.time()
        duration = end_time - start_time
        
        # Show results
        print("\n" + "="*60)
        print("‚úÖ DISCOVERY COMPLETED!")
        print(f"üìä Feeds processed: {results['feeds_processed']}")
        print(f"üìä Articles discovered: {results['articles_discovered']}")
        print(f"üìä New articles: {results['new_articles']}")
        print(f"üìä Duplicates skipped: {results['duplicates_skipped']}")
        print(f"üìä Errors: {results['errors']}")
        print(f"‚è±Ô∏è  Duration: {duration:.1f} seconds ({duration/60:.1f} minutes)")
        if results['new_articles'] > 0:
            print(f"üìà Average: {results['new_articles']/duration:.1f} articles/second")
        print("="*60)
        
        # Show final database stats
        try:
            from agent.services.smart_article_service import SmartArticleService
            smart_service = SmartArticleService()
            stats = smart_service.get_article_stats()
            
            if stats:
                print("\nüìà DATABASE STATISTICS:")
                print(f"   ‚Ä¢ Total articles: {stats.get('total_articles', 0)}")
                print(f"   ‚Ä¢ Unique stories: {stats.get('unique_stories', 0)}")
                print(f"   ‚Ä¢ Categories: {stats.get('categories_count', 0)}")
                print(f"   ‚Ä¢ Average importance: {stats.get('avg_importance_score', 5.0):.1f}")
                
                if 'importance_distribution' in stats:
                    print("\nüìä Importance Score Distribution:")
                    for score, count in sorted(stats['importance_distribution'].items()):
                        print(f"      Score {score}: {count} stories")
        except Exception as e:
            print(f"‚ö†Ô∏è  Could not fetch final stats: {e}")
        
        print("\nüéâ Ready for podcast generation!")
        
        db.close()
        return True
        
    except KeyboardInterrupt:
        print("\n‚ùå Discovery interrupted by user")
        return False
        
    except Exception as e:
        print(f"\n‚ùå Discovery failed: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Main function"""
    success = run_full_discovery()
    
    if success:
        print("\n‚úÖ Full discovery completed successfully!")
    else:
        print("\n‚ùå Full discovery failed. Check the errors above.")
        sys.exit(1)

if __name__ == "__main__":
    main()
